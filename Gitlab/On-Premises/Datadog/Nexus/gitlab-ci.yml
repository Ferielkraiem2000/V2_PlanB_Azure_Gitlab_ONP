image: maven:3.8.4-jdk-11

variables:
  MAVEN_CLI_OPTS: ""
  GIT_EMAIL: "$GIT_EMAIL"
  GIT_TOKEN: "$CI_JOB_TOKEN"
  BUSINESS_GROUP: "$BUSINESS_GROUP"
  ANYPOINT_CLIENT_ID: "$ANYPOINT_CLIENT_ID"
  ANYPOINT_CLIENT_SECRET: "$ANYPOINT_CLIENT_SECRET"
  ENCRYPTION_PASSWORD: "$ENCRYPTION_PASSWORD"  

stages:
  - cache
  - setup
  - update
  - generate-api
  - build
  - host-jar
  - host-parentpom
  - deploy
  - send-logs


before_script:
  - apt-get update && apt-get install -y jq
  - apt-get install -y jq openssl
cache:
  key:
    files:
      - pom.xml
  paths:
    - .m2/repository/


setup_maven:
  stage: setup
  script:


    - git config --global user.email "$GITLAB_EMAIL"
    - git remote add dev https://gitlab.com/${GIT_USERNAME}/${GIT_REPO}.git
    - git remote set-url dev https://oauth2:${GIT_TOKEN}@gitlab.com/${GIT_USERNAME}/${GIT_REPO}.git  
    - git checkout ${CI_COMMIT_REF_NAME} || git checkout -b ${CI_COMMIT_REF_NAME}


    - GITLAB_EMAIL_ENCRYPTED=$(echo -n "${GITLAB_EMAIL}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
    - ANYPOINT_CLIENT_ID_ENCRYPTED=$(echo -n "${ANYPOINT_CLIENT_ID}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
    - ANYPOINT_CLIENT_SECRET_ENCRYPTED=$(echo -n "${ANYPOINT_CLIENT_SECRET}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
    - GITLAB_TOKEN_ENCRYPTED=$(echo -n "${GIT_TOKEN}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
   
    - |
      cat << EOF > settings.xml
      <settings>
        <servers>
          <server>
            <id>anypoint-repo</id>
            <username>${ANYPOINT_CLIENT_ID_ENCRYPTED}</username>
            <password>${ANYPOINT_CLIENT_SECRET_ENCRYPTED}</password>
          </server>
          <server>
            <id>Repository</id>
            <username>Raslen110</username>
            <password>Warghui110!</password>
          </server>
          <server>
            <id>gitlab-repo</id>
            <username>${GITLAB_EMAIL_ENCRYPTED}</username>
            <password>${GITLAB_TOKEN_ENCRYPTED}</password>
          </server>
          <server>  
                <id>nexus</id>
                <username>${NEXUS_USERNAME}</username>
                <password>${NEXUS_PASSWORD}</password>
         </server>
        </servers>
        <profiles>
          <profile>
            <id>anypoint-profile</id>
            <properties>
              <anypoint.clientId>${ANYPOINT_CLIENT_ID_ENCRYPTED}</anypoint.clientId>
              <anypoint.clientSecret>${ANYPOINT_CLIENT_SECRET_ENCRYPTED}</anypoint.clientSecret>
            </properties>
          </profile>
          <profile>
            <id>gitlab-profile</id>
            <properties>
              <gitlab.email>${GITLAB_EMAIL_ENCRYPTED}</gitlab.email>
              <gitlab.token>${GITLAB_TOKEN_ENCRYPTED}</gitlab.token>
            </properties>
          </profile>
        </profiles>
        <activeProfiles>
          <activeProfile>anypoint-profile</activeProfile>
          <activeProfile>gitlab-profile</activeProfile>
        </activeProfiles>
      </settings>
      EOF
    - git config --global user.email "${GITLAB_EMAIL}"
    - git config --global user.name "${GITLAB_USERNAME}"
    - git checkout -b "${CI_COMMIT_REF_NAME}" || git checkout "${CI_COMMIT_REF_NAME}"
    - git add settings.xml
    - git commit -m "Add Maven settings file" || echo "Nothing to commit"
    - git push dev "${CI_COMMIT_REF_NAME}"




update_parent_pom:


  stage: update
  script:
    - echo "Checking for settings.xml..."
    - ls -la ./settings.xml || { echo "settings.xml not found"; exit 1; }
    - echo "Extracting GITLAB_EMAIL_ENCRYPTED..."
    - |
      GITLAB_EMAIL_ENCRYPTED=$(sed -n "/<id>gitlab-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p" ./settings.xml)
      if [ -z "$GITLAB_EMAIL_ENCRYPTED" ]; then
        echo "Failed to extract GITLAB_EMAIL_ENCRYPTED"
        exit 1
      fi
    - echo "Decrypting GITLAB_EMAIL..."
    - |
      GITLAB_EMAIL_DECRYPTED=$(echo "${GITLAB_EMAIL_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)
      if [ $? -ne 0 ]; then
        echo "Decryption failed"
        exit 1
      fi
    - git config --global user.email "${GITLAB_EMAIL_DECRYPTED}"
    - git remote add dev https://gitlab.com/${GIT_USERNAME}/${GIT_REPO}.git
    - git remote set-url dev hhttps://oauth2:${GIT_TOKEN}@gitlab.com/${GIT_USERNAME}/${GIT_REPO}.git  
    - git checkout ${CI_COMMIT_REF_NAME} || git checkout -b ${CI_COMMIT_REF_NAME}
    - git pull --rebase dev ${CI_COMMIT_REF_NAME} || echo "No changes to pull"
    - |
        apt-get update -y
        apt-get install jq -y
        touch update-parentPOM.sh
        echo '#!/bin/bash' > update-parentPOM.sh
        echo 'ANYPOINT_CLIENT_ID_ENCRYPTED=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p" ./settings.xml)' >> update-parentPOM.sh
        echo 'ANYPOINT_CLIENT_SECRET_ENCRYPTED=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p" ./settings.xml)' >> update-parentPOM.sh
        echo 'ANYPOINT_ID_DECRYPTED=$(echo "${ANYPOINT_CLIENT_ID_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)' >> update-parentPOM.sh
        echo 'ANYPOINT_SECRET_DECRYPTED=$(echo "${ANYPOINT_CLIENT_SECRET_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)' >> update-parentPOM.sh
        echo 'org_id=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/me" -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "Content-Type: application/json" | jq -r ".user.organization.id")' >> update-parentPOM.sh
        echo 'MULE_APP_NAME=$(grep -oPm1 "(?<=<name>)[^<]+" pom.xml)' >> update-parentPOM.sh
        echo 'MULE_RUNTIME_VERSION=$(grep -oPm1 "(?<=<app.runtime>)[^<]+" pom.xml)' >> update-parentPOM.sh
        echo 'cat << EOF > parent_pom.xml' >> update-parentPOM.sh
        echo '<?xml version="1.0" encoding="UTF-8"?>' >> update-parentPOM.sh
        echo '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">' >> update-parentPOM.sh
        echo '  <modelVersion>4.0.0</modelVersion>' >> update-parentPOM.sh
        echo '  <groupId>$org_id</groupId>' >> update-parentPOM.sh
        echo '  <artifactId>parent-pom</artifactId>' >> update-parentPOM.sh
        echo '  <version>1.0.0</version>' >> update-parentPOM.sh
        echo '  <packaging>pom</packaging>' >> update-parentPOM.sh
        echo '  <name>parent-pom</name>' >> update-parentPOM.sh
        echo '  <properties>' >> update-parentPOM.sh
        echo '    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>' >> update-parentPOM.sh
        echo '    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>' >> update-parentPOM.sh
        echo '    <app.runtime>${MULE_RUNTIME_VERSION}</app.runtime>' >> update-parentPOM.sh
        echo '    <mule.maven.plugin.version>4.1.1</mule.maven.plugin.version>' >> update-parentPOM.sh
        echo '  </properties>' >> update-parentPOM.sh
        echo '  <build>' >> update-parentPOM.sh
        echo '    <plugins>' >> update-parentPOM.sh
        echo '    </plugins>' >> update-parentPOM.sh
        echo '  </build>' >> update-parentPOM.sh
        echo '  <repositories>' >> update-parentPOM.sh
        echo '    <repository>' >> update-parentPOM.sh
        echo '      <id>nexus</id>' >> update-parentPOM.sh
        echo '      <url>https://wanted-ostrich-singularly.ngrok-free.app/repository/mule4-parentpom/</url>' >> update-parentPOM.sh
        echo '      <releases>' >> update-parentPOM.sh
        echo '        <enabled>true</enabled>' >> update-parentPOM.sh
        echo '        <updatePolicy>never</updatePolicy>' >> update-parentPOM.sh
        echo '      </releases>' >> update-parentPOM.sh
        echo '      <snapshots>' >> update-parentPOM.sh
        echo '        <enabled>false</enabled>' >> update-parentPOM.sh
        echo '      </snapshots>' >> update-parentPOM.sh
        echo '    </repository>' >> update-parentPOM.sh
        echo '  </repositories>' >> update-parentPOM.sh
        echo '  <pluginRepositories>' >> update-parentPOM.sh
        echo '    <pluginRepository>' >> update-parentPOM.sh
        echo '      <id>mulesoft-releases</id>' >> update-parentPOM.sh
        echo '      <name>MuleSoft Releases Repository</name>' >> update-parentPOM.sh
        echo '      <layout>default</layout>' >> update-parentPOM.sh
        echo '      <url>https://repository.mulesoft.org/releases/</url>' >> update-parentPOM.sh
        echo '      <snapshots>' >> update-parentPOM.sh
        echo '        <enabled>false</enabled>' >> update-parentPOM.sh
        echo '      </snapshots>' >> update-parentPOM.sh
        echo '    </pluginRepository>' >> update-parentPOM.sh
        echo '  </pluginRepositories>' >> update-parentPOM.sh
        echo '  <distributionManagement>' >> update-parentPOM.sh
        echo '    <repository>' >> update-parentPOM.sh
        echo '      <id>nexus</id>' >> update-parentPOM.sh
        echo '      <url>https://wanted-ostrich-singularly.ngrok-free.app/repository/mule4-parentpom/</url>' >> update-parentPOM.sh
        echo '    </repository>' >> update-parentPOM.sh
        echo '  </distributionManagement>' >> update-parentPOM.sh        
        echo '</project>' >> update-parentPOM.sh
        echo 'EOF' >> update-parentPOM.sh
        echo 'PLUGIN_EXISTS=$(grep -c "<groupId>org.mule.tools.maven</groupId>" parent_pom.xml)' >> update-parentPOM.sh
        echo 'if [ "$PLUGIN_EXISTS" -eq 0 ]; then' >> update-parentPOM.sh
        echo '  if [ "${CI_COMMIT_BRANCH}" == "main" ] || [ "${CI_COMMIT_BRANCH}" == "master" ]; then' >> update-parentPOM.sh
        echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudhub2Deployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<provider>MC</provider>\n<environment>${PRODUCTION_ENVIRONMENT}</environment>\n<target>Cloudhub-US-East-2</target>\n<muleVersion>${MULE_RUNTIME_VERSION}</muleVersion>\n<connectedAppClientId>${ANYPOINT_ID_DECRYPTED}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET_DECRYPTED}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<applicationName>${MULE_APP_NAME}</applicationName>\n<businessGroup>${BUSINESS_GROUP}</businessGroup>\n<replicas>1</replicas>\n<vCores>0.1</vCores>\n</cloudhub2Deployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
        echo '  else' >> update-parentPOM.sh
        echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudhub2Deployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<provider>MC</provider>\n<environment>${CI_COMMIT_BRANCH}</environment>\n<target>Cloudhub-US-East-2</target>\n<muleVersion>${MULE_RUNTIME_VERSION}</muleVersion>\n<connectedAppClientId>${ANYPOINT_ID_DECRYPTED}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET_DECRYPTED}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<applicationName>${MULE_APP_NAME}</applicationName>\n<businessGroup>${BUSINESS_GROUP}</businessGroup>\n<replicas>1</replicas>\n<vCores>0.1</vCores>\n</cloudhub2Deployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
        echo '  fi' >> update-parentPOM.sh
        echo '  sed -i "/<\/plugins>/i $CONFIGURATION" parent_pom.xml' >> update-parentPOM.sh
        echo 'fi' >> update-parentPOM.sh


    - chmod +x update-parentPOM.sh
    - ./update-parentPOM.sh


    - git add parent_pom.xml update-parentPOM.sh
    - git diff --cached --quiet || git commit -m "Create and update Parent POM file"
    - git push --force dev $CI_COMMIT_BRANCH


update_project_pom:
  stage: update
  script:
    - |
      GITLAB_EMAIL_ENCRYPTED=$(sed -n '/<id>gitlab-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
      GITLAB_EMAIL_DECRYPTED=$(echo "${GITLAB_EMAIL_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)
      GITLAB_TOKEN_ENCRYPTED=$(sed -n '/<id>gitlab-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p' settings.xml)
      GITLAB_TOKEN_DECRYPTED=$(echo "${GITLAB_TOKEN_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)
      git config --global user.email "$GITLAB_EMAIL"
      git remote add dev https://gitlab.com/${GIT_USERNAME}/${GIT_REPO}.git
      git remote set-url dev https://oauth2:${GIT_TOKEN}@gitlab.com/${GIT_USERNAME}/${GIT_REPO}.git          
    - |
      # Create the update-projectPOM.sh script using touch
      touch update-projectPOM.sh


      # Write the script contents using echo and append to the file
      echo '#!/bin/bash' > update-projectPOM.sh
      echo 'PARENT_GROUP_ID=$(grep -oPm1 "(?<=<groupId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      echo 'PARENT_ARTIFACT_ID=$(grep -oPm1 "(?<=<artifactId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      echo 'PARENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      echo 'PARENT_EXISTS=$(grep -c "<parent>" pom.xml)' >> update-projectPOM.sh
      echo 'echo $PARENT_EXISTS' >> update-projectPOM.sh
      echo 'if [ "$PARENT_EXISTS" -eq 0 ]; then' >> update-projectPOM.sh
      echo '  PARENT_INCLUSION="<parent>\n<groupId>${PARENT_GROUP_ID}</groupId>\n<artifactId>${PARENT_ARTIFACT_ID}</artifactId>\n<version>${PARENT_VERSION}</version>\n<relativePath>./parent_pom.xml</relativePath>\n</parent>"' >> update-projectPOM.sh
      echo '  sed -i "/<\/project>/i $PARENT_INCLUSION" pom.xml' >> update-projectPOM.sh
      echo '  org_id=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/me" -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "Content-Type: application/json" | jq -r ".user.organization.id")' >> update-projectPOM.sh
      echo '  sed -i "0,/<groupId>[^<]*<\/groupId>/s|<groupId>[^<]*</groupId>|<groupId>$org_id</groupId>|" pom.xml' >> update-projectPOM.sh
      echo '  sed -i "0,/<version>[^<]*<\/version>/s|<version>[^<]*</version>|<version>1.0.0</version>|" pom.xml' >> update-projectPOM.sh
      echo '  sed -i "/<\/repositories>/i <repository>\n<id>Repository</id>\n<name>Private Exchange repository</name>\n<url>https://maven.anypoint.mulesoft.com/api/v3/organizations/\${project.groupId}/maven</url>\n<layout>default</layout>\n</repository>" pom.xml' >> update-projectPOM.sh
      echo '  sed -i "/<\/repositories>/i <repository>\n<id>nexus</id>\n<url>https://wanted-ostrich-singularly.ngrok-free.app/repository/mule4-jars/</url>\n<releases>\n<enabled>true</enabled>\n<updatePolicy>never</updatePolicy>\n</releases>\n<snapshots>\n<enabled>false</enabled>\n</snapshots>\n</repository>" pom.xml' >> update-projectPOM.sh
      echo '  sed -i "/<\/project>/i <distributionManagement>\n<repository>\n<id>nexus</id>\n<url>https://wanted-ostrich-singularly.ngrok-free.app/repository/mule4-jars/</url>\n</repository>\n</distributionManagement>" pom.xml' >> update-projectPOM.sh
      echo '  git checkout -b "${CI_COMMIT_BRANCH}" || git checkout "${CI_COMMIT_BRANCH}"' >> update-projectPOM.sh
      echo '  git pull dev ${CI_COMMIT_BRANCH}'>> update-projectPOM.sh
      echo '  git add pom.xml update-projectPOM.sh' >> update-projectPOM.sh
      echo '  git commit -m "Update project POM to include Parent POM"' >> update-projectPOM.sh
      echo '  git push dev "${CI_COMMIT_BRANCH}"' >> update-projectPOM.sh
      echo 'else' >> update-projectPOM.sh
      echo '  echo "<parent> section already exists in pom.xml. No changes made."' >> update-projectPOM.sh
      echo 'fi' >> update-projectPOM.sh
      chmod +x update-projectPOM.sh
      ./update-projectPOM.sh

generate_logs_extraction_API:
  stage: generate-api
  script:
    - |
      echo 'FILE_READ_EXISTS=$(grep -o "file:read" ./src/main/mule/project.xml)' >> update-mule-project.sh
      echo 'echo "FILE_READ_EXISTS:$FILE_READ_EXISTS"' >> update-mule-project.sh
      echo 'if [ -z "$FILE_READ_EXISTS" ]; then' >> update-mule-project.sh
      echo '   Logs_Extraction_API_CONFIG="<http:listener-config name=\"HTTP_Listener_config_2\" doc:name=\"HTTP Listener config\" doc:id=\"b469edd8-f966-4174-9154-c95c1d8975c5\" >\n\
        <http:listener-connection host=\"0.0.0.0\" port=\"8083\" />\n\
          </http:listener-config>\n\
          <flow name=\"pipelineFlow\" doc:id=\"b2d41e55-68be-42f9-8087-a6bedba3c799\" >\n\
            <http:listener doc:name=\"Listener\" doc:id=\"4de5dad7-b857-4ccb-a4e8-e3fbd54bf427\" config-ref=\"HTTP_Listener_config_2\" path=\"/logs\"/>\n\
            <file:read doc:name=\"Read\" doc:id=\"6fbd9ec5-4ee9-435e-b826-03395ba09c27\" path=\"\${ON_PREM_MULE_LOG_FILE}\"/>\n\
            <logger level=\"INFO\" doc:name=\"Logger\" doc:id=\"33fb8f63-dc2e-4e20-b88e-00de3b1f4a9b\" message=\"#\[payload\]\"/>\n\
        </flow>"' >> update-mule-project.sh
      echo '   sed -i "/<\/mule>/i $Logs_Extraction_API_CONFIG" ./src/main/mule/project.xml' >> update-mule-project.sh
      echo '   git config --global user.email "${GITLAB_EMAIL}"' >> update-mule-project.sh     
      echo '   git checkout -b ${CI_COMMIT_BRANCH}  || git checkout ${CI_COMMIT_BRANCH} ' >> update-mule-project.sh 
      echo '   git add ./src/main/mule/project.xml' >> update-mule-project.sh
      echo '   git commit -m "Update Mule Project File"' >> update-mule-project.sh
      echo '  git push dev ${CI_COMMIT_BRANCH}' >> update-mule-project.sh
      echo 'else' >> update-mule-project.sh 
      echo '   echo "File read tag already exists, skipping addition."' >> update-mule-project.sh
      echo 'fi' >> update-mule-project.sh
      echo 'MULE_FILE_DEPENDENCY_EXISTS=$(grep -q "<artifactId>mule-file-connector</artifactId>" ./pom.xml && echo "found" || echo "not found")' >> update-mule-project.sh
      echo 'echo "MULE_FILE_DEPENDENCY_EXISTS:$MULE_FILE_DEPENDENCY_EXISTS"' >> update-mule-project.sh
      echo 'if [ "$MULE_FILE_DEPENDENCY_EXISTS" == "not found" ]; then' >> update-mule-project.sh
      echo '   sed -i "/<\/dependencies>/i \<dependency>\\n<groupId>org.mule.connectors</groupId>\\n<artifactId>mule-file-connector</artifactId>\\n<version>1.5.2</version>\\n<classifier>mule-plugin</classifier>\\n</dependency>" ./pom.xml' >> update-mule-project.sh
      echo '   git config --global user.email "${GITLAB_EMAIL}"' >> update-mule-project.sh       
      echo '   git checkout -b ${CI_COMMIT_BRANCH}  || git checkout ${CI_COMMIT_BRANCH} ' >> update-mule-project.sh 
      echo '   git add ./pom.xml' >> update-mule-project.sh
      echo '   git commit -m "Add File Dependency In POM"' >> update-mule-project.sh
      echo '  git push dev ${CI_COMMIT_BRANCH}' >> update-mule-project.sh
      echo 'fi' >> update-mule-project.sh
      chmod +x update-mule-project.sh
      ./update-mule-project.sh        


build:
  stage: build
  script:
    - mvn -DskipTests clean deploy
      
host_jar:
  stage: host-jar
  script:
    - mvn deploy -s settings.xml


host_parent_pom:
  stage: host-parentpom
  script:
    - mvn deploy -s settings.xml -f parent_pom.xml


deploy_project:
  stage: deploy
  script:
    - mvn deploy -DmuleDeploy -DskipTests


send_logs_to_datadog:
  stage: send-logs
  script:
    - |
      curl -X GET "${SERVER_URL}/logs" -o project.log
      cat project.log
      if [ -s project.log ]; then
           echo "Processing the last 100 lines of logs..."
           tail -n 100 project.log > last_100_logs.log


           echo "Converting logs to JSON format and preparing metrics..."
           echo "[" > metrics.json
           awk '{
                gsub(/\\/,"\\\\");           # Escape backslashes
                gsub(/\"/,"\\\"");           # Escape double quotes
                message = substr($0, index($0,$4))
                if (message != "") {
                  print "{ \"environment\": \"${AZURE_BRANCH}\", \"level\": \"" $3 "\", \"timestamp\": \"" $1 " " $2 "\", \"message\": \"" message "\" },"
               }
           }' last_100_logs.log >> metrics.json
           
           echo "]" >> metrics.json
           echo "Prepared JSON metrics data for the last 100 log entries:"
           cat metrics.json
      fi
        
      curl -X POST "${DATADOG_API_URL}?host=${sys:hostName}&ddsource=${sys:ddsource}&service=${sys:service}&ddtags=${sys:env}" \
           -H "DD-API-KEY: ${DATADOG_API_KEY}" \
           -H "Content-Type: application/json" \
           -d @metrics.json
