image: maven:3.8.4-jdk-11
trigger:
  branches:
    include:
      - '*' 
  paths:
    include:
      - '*' 

variables:
  MAVEN_VERSION: '3.8.4'
  AZURE_BRANCH: $(Build.SourceBranchName)

pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        git config --global user.email "${AZURE_EMAIL}"
        git config --global user.name "${AZURE_USERNAME}"
        git remote add dev https://dev.azure.com/${AZURE_USERNAME}/mulesoft/_git/Mulesoft_On_Premises
        git remote set-url dev https://${AZURE_TOKEN}@dev.azure.com/${AZURE_USERNAME}/mulesoft/_git/Mulesoft_On_Premises
        ANYPOINT_CLIENT_ID_ENCRYPTED=$(echo -n "${ANYPOINT_CLIENT_ID}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
        ANYPOINT_CLIENT_SECRET_ENCRYPTED=$(echo -n "${ANYPOINT_CLIENT_SECRET}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
        AZURE_EMAIL_ENCRYPTED=$(echo -n "${AZURE_EMAIL}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
        AZURE_TOKEN_ENCRYPTED=$(echo -n "${AZURE_TOKEN}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64 -A)
    
        cat << EOF > settings.xml
            <settings>
              <servers>
                <server>
                  <id>anypoint-repo</id>
                  <username>${ANYPOINT_CLIENT_ID_ENCRYPTED}</username>
                  <password>${ANYPOINT_CLIENT_SECRET_ENCRYPTED}</password>
                </server>
                <server>
                  <id>azure-repo</id>
                  <username>${AZURE_EMAIL_ENCRYPTED}</username>
                  <password>${AZURE_TOKEN_ENCRYPTED}</password>
                </server>
                <server>
                <id>jfrog</id>
                <username>${JFROG_USERNAME}</username>
                <password>${JFROG_PASSWORD}</password>
              </server>
              </servers>
              <profiles>
                <profile>
                  <id>anypoint-profile</id>
                  <properties>
                    <anypoint.clientId>${ANYPOINT_CLIENT_ID_ENCRYPTED}</anypoint.clientId>
                    <anypoint.clientSecret>${ANYPOINT_CLIENT_SECRET_ENCRYPTED}</anypoint.clientSecret>
                  </properties>
                </profile>
                <profile>
                  <id>azure-profile</id>
                  <properties>
                    <azure.email>${AZURE_EMAIL_ENCRYPTED}</azure.email>
                    <azure.token>${AZURE_TOKEN_ENCRYPTED}</azure.token>
                  </properties>
                </profile>
              </profiles>
              <activeProfiles>
                <activeProfile>anypoint-profile</activeProfile>
                <activeProfile>azure-profile</activeProfile>
              </activeProfiles>
            </settings>
        EOF
        git checkout -b ${AZURE_BRANCH} || git checkout ${AZURE_BRANCH}    
        git add settings.xml
        git commit -m "Add Maven settings file" || echo "Nothing to commit"
        git push dev ${AZURE_BRANCH}
    displayName: 'Create Settings File'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        AZURE_EMAIL_ENCRYPTED=$(sed -n '/<id>azure-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
        AZURE_TOKEN_ENCRYPTED=$(sed -n '/<id>azure-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p' settings.xml)
        AZURE_EMAIL_DECRYPTED=$(echo "${AZURE_EMAIL_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)
        AZURE_TOKEN_DECRYPTED=$(echo "${AZURE_TOKEN_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)

        git config --global user.email "${AZURE_EMAIL_DECRYPTED}"
        git config --global user.name "${AZURE_USERNAME}"            
        git remote add dev https://dev.azure.com/${AZURE_USERNAME}/mulesoft/_git/Mulesoft_On_Premises
        git remote set-url dev https://${AZURE_TOKEN}@dev.azure.com/${AZURE_USERNAME}/mulesoft/_git/Mulesoft_On_Premises
        touch update-parentPOM.sh
        echo '#!/bin/bash' > update-parentPOM.sh
        echo 'ANYPOINT_CLIENT_ID_ENCRYPTED=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p" settings.xml)' >> update-parentPOM.sh
        echo 'ANYPOINT_CLIENT_SECRET_ENCRYPTED=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p" settings.xml)' >> update-parentPOM.sh
        echo 'ANYPOINT_ID=$(echo "${ANYPOINT_CLIENT_ID_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)' >> update-parentPOM.sh
        echo 'ANYPOINT_SECRET=$(echo "${ANYPOINT_CLIENT_SECRET_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)' >> update-parentPOM.sh
        echo 'cat << EOF > parent_pom.xml' >> update-parentPOM.sh
        echo '<?xml version="1.0" encoding="UTF-8"?>' >> update-parentPOM.sh
        echo '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">' >> update-parentPOM.sh
        echo '  <modelVersion>4.0.0</modelVersion>' >> update-parentPOM.sh
        echo '  <groupId>com.mycompany</groupId>' >> update-parentPOM.sh
        echo '  <artifactId>parent-pom</artifactId>' >> update-parentPOM.sh
        echo '  <version>1.0.0</version>' >> update-parentPOM.sh
        echo '  <packaging>pom</packaging>' >> update-parentPOM.sh
        echo '  <name>parent-pom</name>' >> update-parentPOM.sh
        echo '  <properties>' >> update-parentPOM.sh
        echo '    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>' >> update-parentPOM.sh
        echo '    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>' >> update-parentPOM.sh
        echo '    <app.runtime>4.7.0</app.runtime>' >> update-parentPOM.sh
        echo '    <mule.maven.plugin.version>4.1.1</mule.maven.plugin.version>' >> update-parentPOM.sh
        echo '  </properties>' >> update-parentPOM.sh
        echo '  <build>' >> update-parentPOM.sh
        echo '    <plugins>' >> update-parentPOM.sh
        echo '    </plugins>' >> update-parentPOM.sh
        echo '  </build>' >> update-parentPOM.sh
        echo '  <repositories>' >> update-parentPOM.sh
        echo '    <repository>' >> update-parentPOM.sh
        echo '      <id>jfrog</id>' >> update-parentPOM.sh
        echo '      <url>https://working-cobra-early.ngrok-free.app/artifactory/mule4-jars-parent/</url>' >> update-parentPOM.sh
        echo '      <releases>' >> update-parentPOM.sh
        echo '        <enabled>true</enabled>' >> update-parentPOM.sh
        echo '        <updatePolicy>never</updatePolicy>' >> update-parentPOM.sh
        echo '      </releases>' >> update-parentPOM.sh
        echo '      <snapshots>' >> update-parentPOM.sh
        echo '        <enabled>false</enabled>' >> update-parentPOM.sh
        echo '      </snapshots>' >> update-parentPOM.sh
        echo '    </repository>' >> update-parentPOM.sh
        echo '  </repositories>' >> update-parentPOM.sh
        echo '  <pluginRepositories>' >> update-parentPOM.sh
        echo '    <pluginRepository>' >> update-parentPOM.sh
        echo '      <id>mulesoft-releases</id>' >> update-parentPOM.sh
        echo '      <name>MuleSoft Releases Repository</name>' >> update-parentPOM.sh
        echo '      <layout>default</layout>' >> update-parentPOM.sh
        echo '      <url>https://repository.mulesoft.org/releases/</url>' >> update-parentPOM.sh
        echo '      <snapshots>' >> update-parentPOM.sh
        echo '        <enabled>false</enabled>' >> update-parentPOM.sh
        echo '      </snapshots>' >> update-parentPOM.sh
        echo '    </pluginRepository>' >> update-parentPOM.sh
        echo '  </pluginRepositories>' >> update-parentPOM.sh
        echo '  <distributionManagement>' >> update-parentPOM.sh
        echo '    <repository>' >> update-parentPOM.sh
        echo '      <id>jfrog</id>' >> update-parentPOM.sh
        echo '      <url>https://working-cobra-early.ngrok-free.app/artifactory/mule4-jars-parent/</url>' >> update-parentPOM.sh
        echo '    </repository>' >> update-parentPOM.sh
        echo '  </distributionManagement>' >> update-parentPOM.sh        
        echo '</project>' >> update-parentPOM.sh
        echo 'EOF' >> update-parentPOM.sh
        echo 'PLUGIN_EXISTS=$(grep -c "<groupId>org.mule.tools.maven</groupId>" parent_pom.xml)' >> update-parentPOM.sh
        echo 'if [ "$PLUGIN_EXISTS" -eq 0 ]; then' >> update-parentPOM.sh
        echo '  if [ "${AZURE_BRANCH}" == "main" ] || [ "${AZURE_BRANCH}" == "master" ]; then' >> update-parentPOM.sh
        echo '  CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<armDeployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<target>${PRODUCTION_SERVER}</target>\n<targetType>server</targetType>\n<connectedAppClientId>${ANYPOINT_ID}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<environment>${PRODUCTION_ENVIRONMENT}</environment>\n<muleVersion>4.7.0</muleVersion>\n<properties>\n<key>value</key>\n</properties>\n</armDeployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
        echo '  else' >> update-parentPOM.sh
        echo '  CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<armDeployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<target>on-premises-${AZURE_BRANCH}-ubuntu</target>\n<targetType>server</targetType>\n<connectedAppClientId>${ANYPOINT_ID}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<environment>${AZURE_BRANCH}</environment>\n<muleVersion>4.7.0</muleVersion>\n<properties>\n<key>value</key>\n</properties>\n</armDeployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
        echo '  fi' >> update-parentPOM.sh
        echo '  sed -i "/<\/plugins>/i $CONFIGURATION" parent_pom.xml' >> update-parentPOM.sh
        echo '  git checkout -b ${AZURE_BRANCH} || git checkout ${AZURE_BRANCH}' >> update-parentPOM.sh 
        echo '  git add parent_pom.xml update-parentPOM.sh' >> update-parentPOM.sh
        echo '  git commit -m "Create and update Parent POM file"' >> update-parentPOM.sh
        echo '  git push dev ${AZURE_BRANCH}' >> update-parentPOM.sh
        echo 'fi' >> update-parentPOM.sh
        chmod +x update-parentPOM.sh
        ./update-parentPOM.sh
    displayName: 'Create and Update Parent POM File'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        AZURE_EMAIL_ENCRYPTED=$(sed -n '/<id>azure-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
        AZURE_TOKEN_ENCRYPTED=$(sed -n '/<id>azure-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p' settings.xml)
        AZURE_EMAIL_DECRYPTED=$(echo "${AZURE_EMAIL_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)
        AZURE_TOKEN_DECRYPTED=$(echo "${AZURE_TOKEN_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "$ENCRYPTION_PASSWORD" -base64)

        git config --global user.email "${AZURE_EMAIL_DECRYPTED}"
        git config --global user.name "${AZURE_USERNAME}"
        git remote add dev https://dev.azure.com/${AZURE_USERNAME}/mulesoft/_git/Mulesoft_On_Premises
        git remote set-url dev https://${AZURE_TOKEN}@dev.azure.com/${AZURE_USERNAME}/mulesoft/_git/Mulesoft_On_Premises
        touch update-projectPOM.sh
        echo '#!/bin/bash' > update-projectPOM.sh
        echo 'PARENT_GROUP_ID=$(grep -oPm1 "(?<=<groupId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
        echo 'PARENT_ARTIFACT_ID=$(grep -oPm1 "(?<=<artifactId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
        echo 'PARENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
        echo 'echo "The groupId is: $PARENT_GROUP_ID"' >> update-projectPOM.sh
        echo 'echo "The artifactId is: $PARENT_ARTIFACT_ID"' >> update-projectPOM.sh
        echo 'echo "The version is: $PARENT_VERSION"' >> update-projectPOM.sh
        echo 'PARENT_EXISTS=$(grep -c "<parent>" pom.xml)' >> update-projectPOM.sh
        echo 'if [ "$PARENT_EXISTS" -eq 0 ]; then' >> update-projectPOM.sh
        echo '  PARENT_INCLUSION="<parent>\n<groupId>${PARENT_GROUP_ID}</groupId>\n<artifactId>${PARENT_ARTIFACT_ID}</artifactId>\n<version>${PARENT_VERSION}</version>\n<relativePath>./parent_pom.xml</relativePath>\n</parent>"' >> update-projectPOM.sh
        echo '  sed -i "/<\/project>/i $PARENT_INCLUSION" pom.xml' >> update-projectPOM.sh
        echo '  sed -i "0,/<version>[^<]*<\/version>/s|<version>[^<]*</version>|<version>1.0.0</version>|" pom.xml' >> update-projectPOM.sh
        echo '  sed -i "0,/<mule.maven.plugin.version>[^<]*<\/mule.maven.plugin.version>/s|<mule.maven.plugin.version>[^<]*</mule.maven.plugin.version>|<mule.maven.plugin.version>4.1.1</mule.maven.plugin.version>|" pom.xml' >> update-projectPOM.sh
        echo '  sed -i "/<\/repositories>/i \<repository>\\<id>jfrog</id>\\<url>https://working-cobra-early.ngrok-free.app/artifactory/mule4-jars/</url>\\<releases>\\<enabled>true</enabled>\\<updatePolicy>never</updatePolicy>\\</releases>\\<snapshots>\\<enabled>false</enabled>\\</snapshots>\\</repository>" pom.xml' >> update-projectPOM.sh
        echo '  sed -i "/<\/project>/i \<distributionManagement>\\<repository>\\<id>jfrog</id>\\<url>https://working-cobra-early.ngrok-free.app/artifactory/mule4-jars/</url>\\</repository>\\</distributionManagement>" pom.xml' >> update-projectPOM.sh        
        echo '  git checkout -b ${AZURE_BRANCH} || git checkout ${AZURE_BRANCH}' >> update-projectPOM.sh 
        echo '  git add pom.xml' >> update-projectPOM.sh
        echo '  git commit -m "Update project POM to include Parent POM"' >> update-projectPOM.sh
        echo '  git push dev ${AZURE_BRANCH}' >> update-projectPOM.sh
        echo 'fi' >> update-projectPOM.sh
        chmod +x update-projectPOM.sh
        ./update-projectPOM.sh
    displayName: 'Update Project POM File'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        echo 'FILE_READ_EXISTS=$(grep -o "file:read" ./src/main/mule/project.xml)' >> update-mule-project.sh
        echo 'echo "FILE_READ_EXISTS:$FILE_READ_EXISTS"' >> update-mule-project.sh
        echo 'if [ -z "$FILE_READ_EXISTS" ]; then' >> update-mule-project.sh
        echo '   Logs_Extraction_API_CONFIG="<http:listener-config name=\"HTTP_Listener_config_2\" doc:name=\"HTTP Listener config\" doc:id=\"b469edd8-f966-4174-9154-c95c1d8975c5\" >\n\
        <http:listener-connection host=\"0.0.0.0\" port=\"8083\" />\n\
          </http:listener-config>\n\
          <flow name=\"pipelineFlow\" doc:id=\"b2d41e55-68be-42f9-8087-a6bedba3c799\" >\n\
            <http:listener doc:name=\"Listener\" doc:id=\"4de5dad7-b857-4ccb-a4e8-e3fbd54bf427\" config-ref=\"HTTP_Listener_config_2\" path=\"/logs\"/>\n\
            <file:read doc:name=\"Read\" doc:id=\"6fbd9ec5-4ee9-435e-b826-03395ba09c27\" path=\"\${ON_PREM_MULE_LOG_FILE}\"/>\n\
            <logger level=\"INFO\" doc:name=\"Logger\" doc:id=\"33fb8f63-dc2e-4e20-b88e-00de3b1f4a9b\" message=\"#\[payload\]\"/>\n\
        </flow>"' >> update-mule-project.sh
        echo '   sed -i "/<\/mule>/i $Logs_Extraction_API_CONFIG" ./src/main/mule/project.xml' >> update-mule-project.sh
        echo '   git config --global user.email "${AZURE_EMAIL}"' >> update-mule-project.sh
        echo '   git config --global user.name "${AZURE_USERNAME}"' >> update-mule-project.sh          
        echo '   git checkout -b ${AZURE_BRANCH}  || git checkout ${AZURE_BRANCH} ' >> update-mule-project.sh 
        echo '   git add ./src/main/mule/project.xml' >> update-mule-project.sh
        echo '   git commit -m "Update Mule Project File"' >> update-mule-project.sh
        echo '  git push dev ${AZURE_BRANCH}' >> update-mule-project.sh
        echo 'else' >> update-mule-project.sh 
        echo '   echo "File read tag already exists, skipping addition."' >> update-mule-project.sh
        echo 'fi' >> update-mule-project.sh
        echo 'MULE_FILE_DEPENDENCY_EXISTS=$(grep -q "<artifactId>mule-file-connector</artifactId>" ./pom.xml && echo "found" || echo "not found")' >> update-mule-project.sh
        echo 'echo "MULE_FILE_DEPENDENCY_EXISTS:$MULE_FILE_DEPENDENCY_EXISTS"' >> update-mule-project.sh
        echo 'if [ "$MULE_FILE_DEPENDENCY_EXISTS" == "not found" ]; then' >> update-mule-project.sh
        echo '   sed -i "/<\/dependencies>/i \<dependency>\\n<groupId>org.mule.connectors</groupId>\\n<artifactId>mule-file-connector</artifactId>\\n<version>1.5.2</version>\\n<classifier>mule-plugin</classifier>\\n</dependency>" ./pom.xml' >> update-mule-project.sh
        echo '   git config --global user.email "${AZURE_EMAIL}"' >> update-mule-project.sh
        echo '   git config --global user.name "${AZURE_USERNAME }}"' >> update-mule-project.sh          
        echo '   git checkout -b ${AZURE_BRANCH}  || git checkout ${AZURE_BRANCH}} ' >> update-mule-project.sh 
        echo '   git add ./pom.xml' >> update-mule-project.sh
        echo '   git commit -m "Add File Dependency In POM"' >> update-mule-project.sh
        echo '  git push dev ${AZURE_BRANCH}' >> update-mule-project.sh
        echo 'fi' >> update-mule-project.sh
        chmod +x update-mule-project.sh
        ./update-mule-project.sh        
    displayName: 'Generate Logs Extraction API' 

  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      options: '--batch-mode'
      goals: 'package'
    displayName: 'Build'

  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      options: '--batch-mode -DmuleDeploy -DskipTests'
      goals: 'deploy'
    displayName: 'Deploy to On Premises' 

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        curl -XPUT -H "Content-Type: application/json" ${ELASTICSEARCH_URL}/_cluster/settings -d '{ "transient": { "cluster.routing.allocation.disk.threshold_enabled": false } }'
        curl -XPUT -H "Content-Type: application/json" ${ELASTICSEARCH_URL}/_all/_settings -d '{"index.blocks.read_only_allow_delete": null}'            
    displayName: 'Configure Elasticsearch'    

    
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        curl -X GET "${SERVER_URL}/logs" -o project.log
        cat project.log
        if [ -s project.log ]; then
            echo "Processing the last 100 lines of logs..."
            tail -n 100 project.log > last_100_logs.log

            echo "Converting logs to JSON format and preparing metrics..."
            echo "[" > metrics.json
            awk '{
                gsub(/\\/,"\\\\");           # Escape backslashes
                gsub(/\"/,"\\\"");           # Escape double quotes
                message = substr($0, index($0,$4))
                if (message != "") {
                  print "{ \"environment\": \"${AZURE_BRANCH}\", \"level\": \"" $3 "\", \"timestamp\": \"" $1 " " $2 "\", \"message\": \"" message "\" },"
               }
            }' last_100_logs.log >> metrics.json
           
            echo "]" >> metrics.json
            echo "Prepared JSON metrics data for the last 100 log entries:"
            cat metrics.json
        fi
        curl -X POST ${LOGSTASH_URL} \
              -F 'log=@metrics.json'
    displayName: 'Send Logs To Logstash' 

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        mvn deploy -s settings.xml
    displayName: 'Host Jar In JFROG' 

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        mvn deploy -s settings.xml -f parent_pom.xml          
    displayName: 'Host ParentPOM In JFROG' 